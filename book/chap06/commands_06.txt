### Chapter 6, Abstraction

# Documenting Functions
>>> def getNames():
...     'Allows user to input names and return them in a list'
...     nms = []
...     prompt = 'Enter name (or "done" when done): '
...     while True:
...         entry = input(prompt)
...         if entry != 'done' and entry != '':
...             nms.append(entry)
...         if entry == 'done':
...             break
...     return nms
...
>>> getNames.__doc__
'Allows user to input names and return them in a list'
>>> help(getNames)

Help on function getNames in module __main__:

getNames()
    Allows user to input names and return them in a list

# Can I change Parameters? Short answer, yes, any mutable object can be changed
>>> def try_to_change(n):
...     n = 'Mr. Gumby'
...
>>>
>>> name = 'Mrs. Entity'
>>> try_to_change(name)
>>> name
'Mrs. Entity'
>>> def change(n):
...     n[0] = 'Mr. Gumby'
...
>>> names = getNames()
Enter name (or "done" when done): Mrs. Entity
Enter name (or "done" when done): Mrs. Thing
Enter name (or "done" when done): done
>>> names
['Mrs. Entity', 'Mrs. Thing']
>>> change(names)
>>> names
['Mr. Gumby', 'Mrs. Thing']
>>> names = getNames()
Enter name (or "done" when done): Mrs. Entity
Enter name (or "done" when done): Mrs. Thing
Enter name (or "done" when done): done
>>> names
['Mrs. Entity', 'Mrs. Thing']
>>> change(names[:]) # passes a copy of the list
>>> names
['Mrs. Entity', 'Mrs. Thing']
>>> me
'Jason Ruggles Hardman'
>>> wife
'Kara Lyn Hardman'
>>> storage = {}
>>> storage['first'] = {}
>>> storage['middle'] = {}
>>> storage['last'] = {}
>>> storage['first'].setdefault('Hardman', []).append(me)
>>> storage['middle'].setdefault('Ruggles', []).append(me)
>>> storage['last'].setdefault('Hardman', []).append(me)
>>> storage
{'first': {'Hardman': ['Jason Ruggles Hardman']}, 'middle': {'Ruggles': ['Jason Ruggles Hardman']}, 'last': {'Hardman': ['Jason Ruggles Hardman']}}
>>> storage['first'].setdefault('Kara', []).append(wife)
>>> storage['middle'].setdefault('Lyn', []).append(wife)
>>> storage['last'].setdefault('Hardman', []).append(wife)
>>> storage
{'first': {'Hardman': ['Jason Ruggles Hardman'], 'Kara': ['Kara Lyn Hardman']}, 'middle': {'Ruggles': ['Jason Ruggles Hardman'], 'Lyn': ['Kara Lyn Hardman']}, 'last': {'Hardman': ['Jason Ruggles Hardman', 'Kara Lyn Hardman']}}
>>> storage['last']['Hardman']
['Jason Ruggles Hardman', 'Kara Lyn Hardman']
>>>
>>> def init(data):
...     data['first'] = {}
...     data['middle'] = {}
...     data['last'] = {}
...
>>> storage = {}
>>> init(storage)
>>> storage
{'first': {}, 'middle': {}, 'last': {}}
>>> def updateMe(name, store): ## before I got to the similar script in the book...
...     lst_name = name.split()
...     if len(lst_name) == 2:
...         lst_name.insert(1, 'none')
...     store['first'].setdefault(lst_name[0], []).append(name)
...     store['middle'].setdefault(lst_name[1], []).append(name)
...     store['last'].setdefault(lst_name[2], []).append(name)
...
>>> updateMe(me, storage)
>>> storage
{'first': {'Jason': ['Jason Ruggles Hardman']}, 'middle': {'Ruggles': ['Jason Ruggles Hardman']}, 'last': {'Hardman': ['Jason Ruggles Hardman']}}
>>> updateMe(wife, storage)
>>> storage
{'first': {'Jason': ['Jason Ruggles Hardman'], 'Kara': ['Kara Lyn Hardman']}, 'middle': {'Ruggles': ['Jason Ruggles Hardman'], 'Lyn': ['Kara Lyn Hardman']}, 'last': {'Hardman': ['Jason Ruggles Hardman', 'Kara Lyn Hardman']}}
>>> mom = 'Carolyn Briggs'
>>> updateMe(mom, storage)
>>> storage
{'first': {'Jason': ['Jason Ruggles Hardman'], 'Kara': ['Kara Lyn Hardman'], 'Carolyn': ['Carolyn Briggs']}, 'middle': {'Ruggles': ['Jason Ruggles Hardman'], 'Lyn': ['Kara Lyn Hardman'], 'none': ['Carolyn Briggs']}, 'last': {'Hardman': ['Jason Ruggles Hardman', 'Kara Lyn Hardman'], 'Briggs': ['Carolyn Briggs']}}
>>> random = 'Joe Shmoe'
>>> updateMe(random, storage)
>>> storage['middle']['none']
['Carolyn Briggs', 'Joe Shmoe']
>>>
>>> def lookup(data, label, name):
...     return data[label].get(name)
...
>>> lookup(storage, 'middle', 'none')
['Carolyn Briggs', 'Joe Shmoe']
>>> lookup(storage, 'last', 'Hardman')
['Jason Ruggles Hardman', 'Kara Lyn Hardman']
>>> lookup(storage, 'last', 'Smith')
>>>
>>> def store(data, full_name):  ## From the book
...     names = full_name.split()
...     if len(names) == 2: names.insert(1, '')
...     labels = 'first', 'middle', 'last'
...     for label, name in zip(labels, names):
...         people = lookup(data, label, name)
...         if people:
...             people.append(full_name)
...         else:
...             data[label][name] = [full_name]
...
>>> myNames = {}
>>> init(myNames)
>>> store(myNames, me)
>>> store(myNames, wife)
>>> store(myNames, mom)
>>> store(myNames, random)
>>> lookup(myNames, 'middle', None)
>>> lookup(myNames, 'middle', '')
['Carolyn Briggs', 'Joe Shmoe']
>>> lookup(myNames, 'last', 'Hardman')
['Jason Ruggles Hardman', 'Kara Lyn Hardman']

# What if My Parameter Is Immutable?
>>>  # in the next two function methods, the first is cleaner
>>> def inc(x): return x + 1
...
>>> inc(2)
3
>>> foo = 10
>>> inc(foo)
11
>>> foo
10
>>> foo = inc(foo)
>>> foo
11
>>>  ^^^ is cleaner than vvv
>>> def inc(x): x[0] = x [0] + 1
...
>>> foo = [10]
>>> inc(foo)
>>> foo
[11]

# Keyword Parameters and Defaults:
>>> def hello_1(greeting, name):
...     print('{}, {}!'.format(greeting, name))
...
>>> def hello_2(name, greeting):
...     print('{}, {}!'.format(name, greeting))
...
>>> hello_1('Hello', 'world')
Hello, world!
>>> hello_2('Hello', 'world')
Hello, world!
>>> hello_1(greeting='Hello', name='world')
Hello, world!
>>> hello_1(name='world', greeting='Hello')
Hello, world!
>>> hello_2(greeting='Hello', name='world')
world, Hello!
>>>
>>> def hello_3(greeting='Hello', name='world'):
...     print('{}, {}!'.format(greeting, name))
...
>>> hello_3()
Hello, world!
>>> hello_3('Greetings')
Greetings, world!
>>> hello_3('Greetings', 'universe')
Greetings, universe!
>>> hello_3(name=me)
Hello, Jason Ruggles Hardman!
>>>
>>> def hello_4(name, greeting='Hello', punctuation='!'):
...     print('{}, {}{}'.format(greeting, name, punctuation))
...
>>> hello_4('Mars')
Hello, Mars!
>>> hello_4('Mars', 'Howdy')
Howdy, Mars!
>>> hello_4('Mars', 'Howdy', '...')
Howdy, Mars...
>>> hello_4('Mars', punctuation='.')
Hello, Mars.
>>> hello_4('Mars', greeting='Top of the morning to ya')
Top of the morning to ya, Mars!
>>> hello_4()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: hello_4() missing 1 required positional argument: 'name'
>>>
>>> def print_params(*params):
...     print(params)
...
>>> print_params('Testing')
('Testing',)
>>> print_params(1, 2, 3)
(1, 2, 3)
>>> def print_params_2(title, *params):
...      print(title)
...      print(params)
...
>>> print_params_2('Params:', 1, 2, 3)
Params:
(1, 2, 3)
>>> print_params_2('Nothing:')
Nothing:
()
>>> print_params_2('Hmm...', something=42)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: print_params_2() got an unexpected keyword argument 'something'
>>>
>>> def print_params_3(**params):
...     print(params)
...
>>> print_params_3(x=1, y=2, z=3)
{'x': 1, 'y': 2, 'z': 3}
>>> def print_params_4(x, y, z=3, *pospar, **keypar):
...     print(x, y, z)
...     print(pospar)
...     print(keypar)
...
>>> print_params_4(1, 2, 3, 5, 6, 7, foo=1, bar=2)
1 2 3
(5, 6, 7)
{'foo': 1, 'bar': 2}
>>> print_params_4(1, 2)
1 2 3
()
{}
>>> print_params_4(1, 2, 3, 5, 6, 7, 8, 9, foo=1, bar=2)
1 2 3
(5, 6, 7, 8, 9)
{'foo': 1, 'bar': 2}
>>> print_params_4(1, 2, foo=1, bar=2)
1 2 3
()
{'foo': 1, 'bar': 2}
>>>
>>> def store(data, *full_names):
...     for full_name in full_names:
...         names = full_name.split()
...         if len(names) == 2: names.insert(1, '')
...         labels = 'first', 'middle', 'last'
...         for label, name in zip(labels, names):
...             people = lookup(data, label, name)
...             if people:
...                 people.append(full_name)
...             else:
...                 data[label][name] = [full_name]
...
>>> d = {}
>>> init(d)
>>> store(d, 'Han Solo')
>>> d
{'first': {'Han': ['Han Solo']}, 'middle': {'': ['Han Solo']}, 'last': {'Solo': ['Han Solo']}}
>>> store(d, 'Luke Skywalker', 'Anakin Skywalker')
>>> lookup(d, 'last', 'Skywalker')
['Luke Skywalker', 'Anakin Skywalker']
