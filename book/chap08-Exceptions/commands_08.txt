### Chapter 8, Exceptions


# The raise Statement
>>> 1/0
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ZeroDivisionError: division by zero
>>> raise Exception
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
Exception
>>> raise Exception('hyperdrive overloaded')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
Exception: hyperdrive overloaded
>>>

Python 2.7.17 (default, Nov  7 2019, 10:07:09)
[GCC 7.4.0] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> import exceptions
>>> dir(exceptions)
['ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException', 'BufferError', 'BytesWarning', 'DeprecationWarning', 'EOFError', 'EnvironmentError', 'Exception', 'FloatingPointError', 'FutureWarning', 'GeneratorExit', 'IOError', 'ImportError', 'ImportWarning', 'IndentationError', 'IndexError', 'KeyError', 'KeyboardInterrupt', 'LookupError', 'MemoryError', 'NameError', 'NotImplementedError', 'OSError', 'OverflowError', 'PendingDeprecationWarning', 'ReferenceError', 'RuntimeError', 'RuntimeWarning', 'StandardError', 'StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError', 'SystemExit', 'TabError', 'TypeError', 'UnboundLocalError', 'UnicodeDecodeError', 'UnicodeEncodeError', 'UnicodeError', 'UnicodeTranslateError', 'UnicodeWarning', 'UserWarning', 'ValueError', 'Warning', 'ZeroDivisionError', '__doc__', '__name__', '__package__']
>>>

Python 2 and 3:
>>> raise ArithmeticError
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ArithmeticError


# Custom Exceptions
>>> class SomeCUstomeException(Exception): pass
...
>>>


# Catching Exceptions
see Division.py & Division_with_Exception.py


# Look, Ma, No Arguments!
>>> class MuffledCalculator:
...     muffled = False
...     def calc(self, expr):
...         try:
...             return eval(expr)
...         except ZeroDivisionError:
...             if self.muffled:
...                 print('Division by zero is illegal')
...             else:
...                 raise
...
>>> calculator = MuffledCalculator()
>>> calculator.calc('10/2')
5.0
>>> calculator.calc('10/0')  # No muffling
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 5, in calc
  File "<string>", line 1, in <module>
ZeroDivisionError: division by zero
>>> calculator.muffled = True
>>> calculator.calc('10/0')
Division by zero is illegal


# More Than One Except Clause
see Division_with_Exceptions.py


# Catching Two Exceptions with One Block
see Division_with_Exception++.py


# Catching an Object
see Division_Catch_Exception_Object.py


# A Real Catchall
#I didn't write a script for this... to get it to catch all, just
#leave off the exception between "except" and ":". From what I
#gather, this is not advised because even CTRL + c, or sys.exit
#are caught...


# When All Is Well
see Simple_Task.py, Division_2.0.py, and Division_2.1.py


# And Finally...
see Finally.py and All_4.py


# Exceptions and Functions
>>> def faulty():
...     raise Exception('Something is wrong!')
...
>>> def ignore_exception():
...     faulty()
...
>>> def handle_exception():
...     try:
...         faulty()
...     except:
...         print('Exception handled')
...
>>> ignore_exception()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 2, in ignore_exception
  File "<stdin>", line 2, in faulty
Exception: Something is wrong!
>>> handle_exception()
Exception handled
>>> faulty()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 2, in faulty
Exception: Something is wrong!

>>> def describePerson(person):
...     print('Description of {name}'.format(**person))
...     print('Age: {age}'.format(**person))
...     if 'occupation' in person:
...         print('Occupation: {occupation}'.format(**person))
...
>>> John = {'name': 'John Smith', 'age': '43', 'occupation': 'Hole Digger'}
>>> Georg = {'name': 'George Hardman', 'age': '53'}
>>> describePerson(Georg)
Description of George Hardman
Age: 53
>>> describePerson(John)
Description of John Smith
Age: 43
Occupation: Hole Digger

>>> def describePerson(person):
...     print('Description of {name}'.format(**person))
...     print('Age: {age}'.format(**person))
...     try:
...         print('Occupation: {occupation}'.format(**person))
...     except KeyError: pass
...
>>> describePerson(Georg)
Description of George Hardman
Age: 53
>>> describePerson(John)
Description of John Smith
Age: 43
Occupation: Hole Digger

>>> tad = ''
>>> try:
...     tad.write
... except AttributeError:
...     print('The object is not writable.')
... else:
...     print('The object is writable')
...
The object is not writable.
