### Chapter 7, More Abstraction


# Polymorphism and Methods
>>> from random import choice
>>> x = choice(['Hello, world!', [1, 2, 'e', 'e', 4]])
>>> x.count('e')
2

>>> 1+2
3
>>> 'Fish' + 'license'
'Fishlicense'
>>>
>>> def add(x, y):
...     return x+y
...
>>> add(1, 2)
3
>>> add('Fish', 'license')
'Fishlicense'
>>> lista = ['one', 'two', 'three']
>>> listb = ['four', 'five', 'six']
>>> add(lista, listb)
['one', 'two', 'three', 'four', 'five', 'six']

>>> def length_message(x):
...     print('The length of {} is {}'.format(repr(x), len(x)))
...
>>> length_message('Fnord')
The length of 'Fnord' is 5
>>> length_message([1, 2, 3])
The length of [1, 2, 3] is 3


# Encapsulation
## Note that class OpenObject needs to be created first
>>> o = OpenObject()
>>> o.setName('Sir Lancelot')
>>> o.getName()
'Sir Lancelot'
>>> globalName
'Sir Lancelot'
>>> globalName = 'Sir Gumby'
>>> o.getName()
'Sir Gumby'
>>> o1 = OpenObject()
>>> o2 = OpenObject()
>>> o1.setName('Robin Hood')
>>> o2.getName()
'Robin Hood'

### with attributes instead of methods...
>>> c = ClosedObject()
>>> c.setName('Sir Lancelot')
>>> c.getName()
'Sir Lancelot'
>>> r = ClosedObject()
>>> r.setName('Sir Robin')
>>> r.getName()
'Sir Robin'
>>> c.getName()
'Sir Lancelot'


# Making Your Own Classes
>>> class Person:
...     def setName(self, name):
...             self.name = name
...     def getName(self):
...             return self.name
...     def greet(self):
...             print("Hello, world! I'm {}.".format(self.name))
...
>>> foo = Person()
>>> bar = Person()
>>> foo.setName('Luke Skywalker')
>>> bar.setName('Anakin Skywalker')
>>> foo.greet()
Hello, world! I'm Luke Skywalker.
>>> bar.greet()
Hello, world! I'm Anakin Skywalker.
>>> foo.name
'Luke Skywalker'
>>> bar.name = 'Yoda'
>>> bar.greet()
Hello, world! I'm Yoda.
>>> Person.greet(foo)
Hello, world! I'm Luke Skywalker.


# Attributes, Functions, and Methods
>>> class Class:
...     def method(self):
...             print('I have a self!')
...
>>> def function():
...     print("I don't...")
...
>>> instance = Class()
>>> instance.method()
I have a self!
>>> instance.method = function
>>> instance.method()
I don't...
>>>
>>> class Bird:
...     song = 'Squaak!'
...     def sing(self):
...             print(self.song)
...
>>> bird = Bird()
>>> bird.sing()
Squaak!
>>> birdsong = bird.sing
>>> birdsong()
Squaak!


# Privacy Revisited
>>> class Secretive:
...     def __inaccessible(self):
...         print("Bet you can't see me...")
...     def accessible(self):
...         print("The secret message is:")
...         self.__inaccessible()
...
>>> s = Secretive()
>>> s.__inaccessible()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'Secretive' object has no attribute '__inaccessible'
>>> s.accessible()
The secret message is:
Bet you can't see me...
>>> Secretive._Secretive__inaccessible
<function Secretive.__inaccessible at 0x7f426a9a3510>
>>> s._Secretive__inaccessible()
Bet you can't see me...


# The Class Namespace
